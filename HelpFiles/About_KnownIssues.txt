There are some known issues which aren't fixable

<b>Project Cars</b> doesn't send opponent laptime data, so the app has to time their laps. In practice and qual sessions this is fairly reliable (because the app can use the time remaining in the session, sent by the game, for its 'clock' when timing). In race sessions with a fixed number of laps the app has nothing it can use as a clock to time the laps, so times them itself. This can lead to opponent lap / sector time inaccuracies if the player pauses the game (the app's clock is still running).

Joining a session part way through (practice or qualify session online) will result in the app having an incomplete set of data for opponent lap and sector times. In such cases the best opponent lap and sector data is inaccurate. For <b>Project Cars</b>, there's nothing I can do about this. The opponent lap and sector times aren't in the shared memory (the app has to time their laps), so the pace and sector delta reports may be inaccurate (they use the fastest lap completed while the app is running). For Raceroom we can get the fastest opponent lap time, but if this lap was completed before the app was running, the sectors within that lap aren't accessible. In this case the pace report will include the lap time delta, but there'll be no sector delta reports.

In both cases as soon as an opponent sets a faster lap, the app will have up to date best lap data so the pace and sector reports will be accurate and complete.

<b>Project Cars</b> doesn't send opponent car class data, so the app has to assume that all drivers in the race are in the same car class. For multiclass races, all pace and other reports will be relative to the overall leader / fastest car.


<b>Project Cars</b> doesn't have a distinct pre-start procedure phase. I've added some more messages before the 'get ready' but there's a risk here that they might delay the 'get ready' message.


<b>RaceRoom</b> uses a 'slot_id' field to uniquely identify drivers in a race. However, this field doesn't really work properly (there are lots of issues with it), so the app has to use the driver's names. Driver names for AI driver are not unique. All the lap time and other data held for each driver is indexed by driver name so if a race has 2 or more drivers with the same name, the app will get things like lap and sector times wrong. This is only a problem racing the AI - be aware that if you have a car class with a limited number of unique AI drivers (Daytona Prototypes / German Nationals / Americal Nationals / Hill Climb Legends / etc), but select a field size greater than this, the app will do weird things.


<b>RaceRoom</b> doesn't have a pre-start procedure phase for offline races, and in the pre-start phase online ("Gridwalk") very little valid and accurate data is available.


<b>Assetto Corsa Competizione</b> CC only works in a limited manner. TL;DR It's just that CC is a bit of a square peg trying to fit into the round hole of the ACC data streams.

The main issue here is that CC is very sensitive to data synchronisation problems. The way CC is written, it expects a single 'frame' of game data to represent the game state at a single point in time. This isn't the case in ACC. The shared memory blocks (and maybe even the data fields within them) appear to update at different rates so the app sees at lot of stale data (e.g. the lap count increases by 1, but the data field containing the previous lap's lap time is still showing the old lap, or perhaps it's the other way round, it can vary). It's made much worse by the need to use data from the UDP broadcast stream to fill in the data missing from shared memory - race positions and stuff can also be badly out of sync. This is a real pain to work around and I've not been able to find an acceptable solution which doesn't require me to rip the app apart and put it back together. The differing behaviour of some data between online and offline races is also making things more difficult than they should be.


<b>Detecting 'good' passes</b> isn't really feasible. I've tried to limit the 'good pass' messages to overtakes that are reasonably 'secure', don't result in the other car slowing excessively, and don't involve the player going off-track. I can't, for example, tell the difference between a clean pass and a bump-and-run punt, so you might get congratulated for driving like a berk.
